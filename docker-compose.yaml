services:
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - microservices-network

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=db_Users
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - PGUSER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_Users"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  eureka:
    build: ./eureka-service
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  config:
    build: ./config-service
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  api-gateway:
    build: ./api-gateway-service
    container_name: api-gateway-server
    ports:
      - "8080:8080"
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/db_Users
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_MAIL_USERNAME=${EMAIL_LOGIN}
      - SPRING_MAIL_PASSWORD=${EMAIL_PASSWORD}
    depends_on:
      config:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

volumes:
  kafka_data:
  postgres_data:
    driver: local

networks:
  microservices-network:
    driver: bridge